name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint
    
    - name: Run backend tests with coverage
      working-directory: ./backend
      run: npm run test:coverage
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        JWT_SECRET: test-secret
        NODE_ENV: test
    
    - name: Upload backend coverage
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: backend/coverage
    
    - name: Check test coverage threshold
      working-directory: ./backend
      run: |
        coverage=$(npx nyc report --reporter=text-summary | grep 'Lines' | awk '{print $3}' | sed 's/%//')
        if (( $(echo "$coverage < 80" | bc -l) )); then
          echo "Test coverage is below 80%"
          exit 1
        fi

  # Flutter Tests
  flutter-tests:
    name: Flutter Tests
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Install Flutter dependencies
      working-directory: ./savitri_app
      run: flutter pub get
    
    - name: Analyze Flutter code
      working-directory: ./savitri_app
      run: flutter analyze
    
    - name: Run Flutter tests
      working-directory: ./savitri_app
      run: flutter test --coverage
    
    - name: Upload Flutter coverage
      uses: actions/upload-artifact@v3
      with:
        name: flutter-coverage
        path: savitri_app/coverage
    
    - name: Check Flutter test coverage
      working-directory: ./savitri_app
      run: |
        # Install coverage tool
        dart pub global activate coverage
        
        # Generate coverage report
        dart pub global run coverage:format_coverage \
          --lcov \
          --in=coverage \
          --out=coverage/lcov.info \
          --packages=.dart_tool/package_config.json \
          --report-on=lib
        
        # Check coverage threshold
        total_lines=$(grep -o 'LF:[0-9]*' coverage/lcov.info | cut -d':' -f2 | awk '{s+=$1} END {print s}')
        covered_lines=$(grep -o 'LH:[0-9]*' coverage/lcov.info | cut -d':' -f2 | awk '{s+=$1} END {print s}')
        coverage=$((covered_lines * 100 / total_lines))
        
        echo "Coverage: $coverage%"
        if [ $coverage -lt 70 ]; then
          echo "Flutter test coverage is below 70%"
          exit 1
        fi

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: macos-latest
    needs: [backend-tests, flutter-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Start backend services
      run: |
        cd backend
        npm ci
        npm run build
        npm run start:test &
        sleep 10
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        JWT_SECRET: test-secret
        NODE_ENV: test
    
    - name: Run Flutter integration tests
      working-directory: ./savitri_app
      run: |
        flutter pub get
        flutter test integration_test/
    
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: savitri_app/test-results/

  # Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit
      working-directory: ./backend
      run: |
        npm audit --production --audit-level=high
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # HIPAA Compliance Check
  hipaa-compliance:
    name: HIPAA Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for PHI exposure
      run: |
        # Check for potential PHI in code
        if grep -r -i -E "(ssn|social.?security|patient.?name|date.?of.?birth|medical.?record)" --include="*.ts" --include="*.dart" --include="*.js" .; then
          echo "Potential PHI exposure found in code"
          exit 1
        fi
    
    - name: Validate encryption usage
      run: |
        # Ensure AES-256-GCM is used for encryption
        if ! grep -r "AES-256-GCM" backend/; then
          echo "AES-256-GCM encryption not found"
          exit 1
        fi
    
    - name: Check audit logging
      run: |
        # Ensure audit logging is implemented
        if ! grep -r "AuditLogger" backend/; then
          echo "Audit logging not implemented"
          exit 1
        fi

  # Build iOS
  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    needs: [flutter-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
    
    - name: Install iOS dependencies
      working-directory: ./savitri_app
      run: |
        flutter pub get
        cd ios && pod install
    
    - name: Build iOS app
      working-directory: ./savitri_app
      run: flutter build ios --release --no-codesign
    
    - name: Upload iOS build
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: savitri_app/build/ios/iphoneos/

  # Build Android
  build-android:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: [flutter-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'
    
    - name: Build Android app
      working-directory: ./savitri_app
      run: |
        flutter pub get
        flutter build apk --release
        flutter build appbundle --release
    
    - name: Upload Android builds
      uses: actions/upload-artifact@v3
      with:
        name: android-builds
        path: |
          savitri_app/build/app/outputs/flutter-apk/
          savitri_app/build/app/outputs/bundle/release/

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, hipaa-compliance, build-ios, build-android]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy backend to staging
      run: |
        echo "Deploying backend to staging environment"
        # Add actual deployment commands here
    
    - name: Deploy Flutter web to staging
      working-directory: ./savitri_app
      run: |
        flutter build web --release
        echo "Deploying web app to staging"
        # Add actual deployment commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, hipaa-compliance, build-ios, build-android]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy backend to production
      run: |
        echo "Deploying backend to production environment"
        # Add actual deployment commands here
    
    - name: Submit to App Store
      run: |
        echo "Submitting iOS app to App Store"
        # Add actual App Store submission commands
    
    - name: Submit to Play Store
      run: |
        echo "Submitting Android app to Play Store"
        # Add actual Play Store submission commands

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Run load tests
      working-directory: ./backend
      run: |
        npm ci
        npm run test:load
    
    - name: Check performance metrics
      run: |
        # Verify response times are under threshold
        echo "Checking API response times..."
        # Add actual performance validation

  # Notify Results
  notify:
    name: Notify Build Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: success()
      run: |
        echo "Build and deployment successful!"
        # Add Slack/Discord notification
    
    - name: Notify failure
      if: failure()
      run: |
        echo "Build or deployment failed!"
        # Add Slack/Discord notification
